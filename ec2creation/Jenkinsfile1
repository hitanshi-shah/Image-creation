pipeline{
   agent any
   environment{
                action="${params.terraform_action}"
				TF_VAR_subnet_id="${params.subnet_id}"
				TF_VAR_security_group_id="${params.security_group_id}"
				TF_VAR_key_pair="${key_pair}" 
				TF_VAR_region="${params.region}"
				TF_VAR_group="${params.group}"
				TF_VAR_gearID="${params.gearID}"
				
				TERRAFORM_STATE_FILE = "terraform.tfstate"  
   }
   stages {
        stage('Windows VM Provisioning on AWS Cloud') {    
	      steps {
	        dir("./ec2creation") {
	        sh '''
	               sudo rm -rf .terraform; sudo terraform init
	               terraform plan -var=subnet_id=$TF_VAR_subnet_id -var=security_group_id=$TF_VAR_security_group_id -var=key_pair=$TF_VAR_key_pair  -lock=false
	               terraform $action -auto-approve  -state=' + TERRAFORM_STATE_FILE ../plan-output  -lock=false  
				   INSTANCE_ID=$(terraform output -raw theId)
				   def instanceId = sh(script: 'terraform output -state=' + TERRAFORM_STATE_FILE + ' theId', returnStdout: true).trim()
                   env.INSTANCE_ID = instanceId
	        '''
	        }
	        }
		     
        }

		 stage('Image creation from the instance') {    
	      steps {
	        dir("./imagecreation") {
	        sh '''
	               sudo rm -rf .terraform; sudo terraform init
	               terraform plan -var=theId=${env.INSTANCE_ID}  -lock=false
	               terraform $action -auto-approve  -state=' + TERRAFORM_STATE_FILE ../plan-output  -lock=false  
	        '''
	        }
	        }
		     
        }
        // stage('vmSize Upgrade on Linux') {
        //   when { expression { params.CloudProvider == 'AWS' && params.OS == 'Linux' && params.upgrade == 'yes' } }    
	    //   steps {
	    //     dir("./blue-green/linux") {
	    //          withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'aws-key', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY']]) 
	    //          {
	    //           sh '''
	    //           readVarsFile=\$(cat linux.tf | grep instance_type)
        //               oldInstanceType=`echo $readVarsFile|cut -d ' ' -f3`
        //               echo $oldInstanceType
        //               echo $instanceType
        //               sed "s/${oldInstanceType}/${instanceType}/g" linux.tf
        //               terraform init -var=instance_name=$TF_VAR_instance_name -var=policy_arn=$TF_VAR_policy_arn -var=iam_user=$TF_VAR_iam_user -var=iam_group=$TF_VAR_iam_group -var=hostname=$TF_VAR_hostname -var=instance_type=$TF_VAR_instance_type -lock=false
	    //           terraform plan -var=instance_name=$TF_VAR_instance_name -var=policy_arn=$TF_VAR_policy_arn -var=iam_user=$TF_VAR_iam_user -var=iam_group=$TF_VAR_iam_group -var=hostname=$TF_VAR_hostname -var=instance_type=$TF_VAR_instance_type -lock=false
	    //           terraform apply -auto-approve -var=instance_name=$TF_VAR_instance_name -var=policy_arn=$TF_VAR_policy_arn -var=iam_user=$TF_VAR_iam_user -var=iam_group=$TF_VAR_iam_group -var=hostname=$TF_VAR_hostname -var=instance_type=$TF_VAR_instance_type -lock=false
	    //           '''
	    //          }
	    //     }
	    //     }	     
        // }
        // stage('vmSize Upgrade on Windows') {
        //   when { expression { params.CloudProvider == 'AWS' && params.OS == 'Windows' && params.upgrade == 'yes' } }    
	    //   steps {
	    //     dir("./blue-green/windows") {
	    //          withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'aws-key', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY']]) 
	    //          {
	    //          sh '''
	    //         readVarsFile=\$(cat windows.tf | grep instance_type)
        //             oldInstanceType=`echo $readVarsFile|cut -d ' ' -f3`
        //             echo $oldInstanceType
        //             echo $instanceType
        //             sed "s/${oldInstanceType}/${instanceType}/g" windows.tf
        //             terraform init -var=instance_name=$TF_VAR_instance_name -var=policy_arn=$TF_VAR_policy_arn -var=iam_user=$TF_VAR_iam_user -var=iam_group=$TF_VAR_iam_group -var=hostname=$TF_VAR_hostname -var=instance_type=$TF_VAR_instance_type -lock=false
	    //         terraform plan -var=instance_name=$TF_VAR_instance_name -var=policy_arn=$TF_VAR_policy_arn -var=iam_user=$TF_VAR_iam_user -var=iam_group=$TF_VAR_iam_group -var=hostname=$TF_VAR_hostname -var=instance_type=$TF_VAR_instance_type -lock=false
	    //         terraform apply -auto-approve -var=instance_name=$TF_VAR_instance_name -var=policy_arn=$TF_VAR_policy_arn -var=iam_user=$TF_VAR_iam_user -var=iam_group=$TF_VAR_iam_group -var=hostname=$TF_VAR_hostname -var=instance_type=$TF_VAR_instance_type -lock=false
	    //         '''
	    //        }
	    //     }
	    //     }
		     
        // }
        
   }
}	


